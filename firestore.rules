rules_version = '2';

// これから設定するルールは、Cloud Firestoreというデータベースサービスに適用されます。
service cloud.firestore {
  // これから設定するルールは、データベース内のすべてのドキュメントが対象です。
  match /databases/{database}/documents {

    // --------------------------------------------------------------------
    // ■ アプリケーションを利用できる「許可されたユーザー」かどうかを判断する部品（関数）
    // --------------------------------------------------------------------
    // この関数を呼び出すと、アクセスしてきた人が条件を満たすかチェックできます。
    function isAuthorizedUser() {
      // 条件1: ユーザーがGoogleアカウントなどでログインしていること (request.auth != null)
      // 条件2: ログインしたユーザーのID（UID）が、'authorizedUsers'という名前の
      //        コレクションに登録されていること。
      // この両方を満たした場合にのみ、この関数は「許可」を返します。
      return request.auth != null &&
             exists(/databases/$(database)/documents/authorizedUsers/$(request.auth.uid));
    }

    // --------------------------------------------------------------------
    // ■ アプリケーションの主要データ（機器リストやユーザー情報など）に対するルール
    // --------------------------------------------------------------------
    // 'artifacts' という名前のコレクション配下にある、すべてのドキュメントに適用されます。
    match /artifacts/{appId}/{document=**} {
      // 読み書きできるのは、「許可されたユーザー」だけです。
      // 上で作成した isAuthorizedUser() 関数を呼び出して、許可・不許可を判断します。
      allow read, write: if isAuthorizedUser();
    }

    // --------------------------------------------------------------------
    // ■ 許可リスト自体（'authorizedUsers' コレクション）に対するルール
    // --------------------------------------------------------------------
    // 'authorizedUsers' コレクション内の各ドキュメントに適用されます。
    match /authorizedUsers/{userId} {
      // 【読み取り】: ログインしているユーザーなら誰でも許可します。
      // これは、上の isAuthorizedUser() 関数が正しく動作するために必要です。
      // 関数が「この人はリストにいるかな？」と中身を確認できるようにしています。
      allow read: if request.auth != null;

      // 【書き込み】: アプリケーションからの書き込みは、すべて禁止します。
      // 許可リストの編集は、安全のためFirebaseの管理画面から手動で行うことを想定しています。
      // これにより、悪意のあるユーザーが自分を勝手に許可リストに追加する、といった攻撃を防ぎます。
      allow write: if false;
    }
  }
}